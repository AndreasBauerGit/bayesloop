{"name":"bayesloop","tagline":"A framework for fitting and comparing time series models with time-varying parameters","body":"Time series analysis today is an important cornerstone of quantitative science in many disciplines, including natural and life sciences as well as economics and social sciences. Regarding diverse phenomena like tumor cell migration, brain activity and stock trading, a similarity of these complex systems becomes apparent: the observable data we measure – cell migration paths, neuron spike rates and stock prices – are the result of a multitude of underlying processes that act over a broad range of spatial and temporal scales. It is thus to expect that the statistical properties of these systems are not constant, but themselves show stochastic or deterministic dynamics of their own. Time series models used to understand the dynamics of complex systems therefore have to account for temporal changes of the models' parameters.\r\n\r\n*bayesloop* is a python module that focuses on fitting time series models with time-varying parameters and model selection based on [Bayesian inference](https://cocosci.berkeley.edu/tom/papers/tutorial.pdf). Instead of relying on [MCMC methods](http://www.cs.ubc.ca/~arnaud/andrieu_defreitas_doucet_jordan_intromontecarlomachinelearning.pdf), *bayesloop* uses a grid-based approach to evaluate probability distributions, allowing for an efficient approximation of the [marginal likelihood (evidence)](http://alumni.media.mit.edu/~tpminka/statlearn/demo/). The marginal likelihood represents a powerful tool to objectively compare different models and/or optimize the hyper-parameters of hierarchical models. To avoid the [curse of dimensionality](https://en.wikipedia.org/wiki/Curse_of_dimensionality) when analyzing time series models with time-varying parameters, *bayesloop* employs a sequential inference algorithm that is based on the [forward-backward-algorithm](https://en.wikipedia.org/wiki/Forward%E2%80%93backward_algorithm) used in [Hidden Markov models](http://www.cs.sjsu.edu/~stamp/RUA/HMM.pdf). Here, the relevant parameter spaces are kept low-dimensional by processing time series data step by step. The module covers a large class of time series models and is easily extensible.\r\n\r\nThe underlying algorithm of *bayesloop* has been successfully employed in cancer research, studying the migration paths of invasive tumor cells, see this [article](http://www.nature.com/articles/ncomms8516).\r\n\r\n## Features\r\n* objective model selection based on Bayesian evidence (marginal likelihood)\r\n* optimization of hyper-parameters in hierarchical time series models\r\n* provides parameter distributions instead of point estimates\r\n* suitable for online analysis as well as retrospective analysis\r\n* straight-forward handling of missing data points\r\n\r\nNote that the module is currently in beta state, so features may change in the future. Additional documentation will be available soon.\r\n\r\n## Getting started\r\nFor a comprehensive introduction and overview of the main features that *bayesloop* provides, see the [tutorial](https://github.com/christophmark/bayesloop/blob/master/docs/bayesloop_tutorial.ipynb). While you may read this tutorial directly on GitHub, you can also download it and interactively manipulate/execute the code therein (see [here](https://ipython.org/ipython-doc/3/notebook/notebook.html#starting-the-notebook-server) for further information).\r\n\r\nThe following code provides a minimal example of an analysis carried out using *bayesloop*. The data here consists of the number of coal mining disasters in the UK per year from 1851 to 1962 (see this [article](http://www.dima.unige.it/~riccomag/Teaching/ProcessiStocastici/coal-mining-disaster-original%20paper.pdf) for further information).\r\n```\r\nimport bayesloop as bl\r\nimport matplotlib.pyplot as plt\r\n\r\nS = bl.Study()  # start new data study\r\nS.loadExampleData()  # load data array\r\n\r\n# observed number of disasters is modeled by Poisson distribution\r\nM = bl.observationModels.Poisson()\r\nS.setObservationModel(M)\r\n\r\n# set boundaries for annual disaster-rate\r\nS.setBoundaries([[0, 6]])\r\n\r\n# disaster rate itself may change gradually over time\r\nK = bl.transitionModels.GaussianRandomWalk(sigma=0.2)\r\nS.setTransitionModel(K)\r\n\r\nS.fit()  # Bayesian inference\r\n\r\n# plot data together with inferred parameter evolution\r\nplt.figure(figsize=(10, 5))\r\nplt.xlim([1850, 1962])\r\nplt.bar(range(1851, 1962), S.rawData,\r\n        align='center', facecolor='r', alpha=.5)\r\nbl.plotParameterEvolution(S, xLower=1851, xUpper=1962)\r\nplt.show()\r\n```\r\nThis analysis indicates a significant improvement of safety conditions between 1880 and 1900. Check out the [tutorial](https://github.com/christophmark/bayesloop/blob/master/docs/bayesloop_tutorial.ipynb) for further insights!\r\n\r\n## Installation\r\nTo install the latest version of *bayesloop*, download the [zipped version](https://github.com/christophmark/bayesloop/zipball/master) or clone the repository and install *bayesloop* using `python setup.py install`.\r\n\r\nAnother option is to install *bayesloop* from the master branch using pip (requires git):\r\n```\r\npip install git+https://github.com/christophmark/bayesloop\r\n```\r\n\r\n## Dependencies\r\n*bayesloop* is tested on Python 2.7 and depends on NumPy, SciPy, matplotlib and Seaborn.\r\n\r\n## License\r\n[The MIT License (MIT)](https://github.com/christophmark/bayesloop/blob/master/LICENSE)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}